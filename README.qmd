---
title: "Reading & Writing Spatial Files in R"
author: "Mike Proctor"
format: gfm
editor: visual
eval: true
echo: true
output: true
toc: true
---

## Some setup first --

*I used the "sf::" prefix on all of the sf functions just to make things a little clearer when I'm working with spatial data.*

```{r}
#| label: setup
#| echo: true
#| message: false
#| warning: false

suppressPackageStartupMessages(library(tidyverse))
suppressMessages(library(rprojroot))
library(sf)
suppressMessages(library(tigris)) # Lots of layers available here
options(tigris_use_cache = TRUE)

## for rprojroot - pointers to folders in project
base_path           <- find_rstudio_root_file()                     
source_path         <- file.path(base_path, "source_data//")
csv_path            <- file.path(base_path, "csv_output//") 
dat_path            <- file.path(base_path, "dat_output//")
#plot_path          <- file.path(base_path, "plots//")                 
spatial_path        <- file.path(base_path, "spatial_output//")

```

## Load some TIGER Census data with the tigris package

<https://www.rdocumentation.org/packages/tigris/versions/2.1>

<https://github.com/walkerke/tigris/tree/master>

*Explicitly setting the crs when you load the file will save you much frustration later on.*

```{r}
#| message: false
#| warning: false
# Read the data in and explicitly set the crs ------

state <- tigris::states() |> filter(STUSPS == "OK" | STUSPS == "TX")
state <- sf::st_transform(state, crs = 32614)

marshall <- tigris::counties("OK") |> filter(NAME == "Marshall")
marshall <- sf::st_transform(marshall, crs = 32614)

OK_Counties <- tigris::counties() |> filter(STATEFP == "40")
OK_Counties <- sf::st_transform(OK_Counties, crs = 32614)

TX_OK_Counties <- tigris::counties() |> filter(STATEFP == "40" | STATEFP == "48")
TX_OK_Counties <- sf::st_transform(TX_OK_Counties, crs = 32614)



```


# Write a single layer to a geopackage

```{r}
#| label: single


sf::write_sf(marshall, paste0(spatial_path, "one_layer.gpkg"), "Marshall")
sf::st_layers(paste0(spatial_path, "one_layer.gpkg"))

```

# Writing multiple layers to a geopackage

First off we need a bunch of layers to write

```{r}
#| label: rm

rm(list = c("marshall", "state", "TX_OK_Counties"))# These are in the way at the moment so lets get rid of them.
```

### Extract a list of the counties in the data frame

```{r}
#| label: countylist

CountyList <- unique(OK_Counties$NAME)
CountyList
```

### Write a function to pull each row out as a layer into the environment and name it according to the value in the NAME column

```{r}
#| label: layerFunction
#| output: false

 Create_County_df <- function(x) { 
  df <- OK_Counties |> filter(NAME == x) |> distinct(NAME, .keep_all = TRUE)
  df_name <- paste0(x)
  assign(df_name, df, envir = .GlobalEnv)
}

```

### Apply the function to the list of county names

We only need a few data frames to demonstrate so lets filter the list down a bit first.

```{r}
#| label: lapply1
#| echo: true

ShortList <- head(CountyList, 5)
ShortList

lapply(ShortList, Create_County_df)

```

Now we have a bunch of layers to write

## Write multiple data frames to a geopackage

There's two approaches here.

### Loop over a list of sf data frames

```{r}
#| label: loop
#| echo: true
#| message: false
#| warning: false


for (i in ShortList) {
  
  sf::write_sf(get(i), paste0(spatial_path, "OK_Counties.gpkg"), i) # i is an object in first instance but character in layer name
  
}

```

### Use lapply over a vector of names

Applies a function (in this case an anonymous function) to each object within a vector( a list - ShortList).

```{r}
#| label: lapply2
#| echo: true
#| message: false
#| warning: false



lapply(ShortList,function(z) sf::write_sf(get(z), paste0(spatial_path, "OK_Counties2.gpkg"), z)) # get() gets the object not the name


```

# Remove layers from geopackage

### List the layers in the geopackages we just wrote

There should be 5 layers in each file

```{r}
sf::st_layers(paste0(spatial_path, "OK_Counties.gpkg"))
sf::st_layers(paste0(spatial_path, "OK_Counties2.gpkg"))


```

### Delete one layer - should get 4 rows

```{r}
#| label: del1
#| echo: true
#| message: false

sf::st_delete(paste0(spatial_path, "OK_Counties.gpkg"), "Marshall")
sf::st_layers(paste0(spatial_path, "OK_Counties.gpkg")) # Check to see if it worked
```

### Delete a list of layers - deleting 2 layers

```{r}
#| label: del2
#| echo: true
#| message: false


delList <- head(ShortList,2) # take the first 2 rows
lapply(delList, function(y)sf::st_delete(paste0(spatial_path, "OK_Counties2.gpkg"), y))
sf::st_layers(paste0(spatial_path, "OK_Counties2.gpkg")) # Check to see if it worked

```

# Shapefiles

Shapefiles are the most common format for spatial data but they have some limitations. The format requires 4 separate files and column names and data are limited in length. When writing to a shapefile, column names may get truncated - this could be a problem if mulitple columns have similar names. Each layer requires a separate set of files. Writing the 77 layers in CountyList from above would require 4x77 files.

## Write out a shape file

### Write a file with a time stamp in filename - This works with any filename - csv, xlsx etc

*GDAL complains here because there are too many digits in the ALAND and AWATER fields - the answer is to not use a shape file.*

```{r}
#| label: st_write


timestamp <- format(Sys.time(), "%Y%m%d_%H%M")

sf::st_write(Adair, paste0(spatial_path, "Adair_County_", timestamp,".shp")) #Adair_County_20250305_1126.shp


```

## Read a shape file - the one we just wrote out

```{r}
#| label: st_read


Adair_Shape <- sf::st_read(paste0(spatial_path, "Adair_County_", timestamp,".shp")) # I cheated here - how?

plot(Adair_Shape$geometry)


```

# Clean out environment and reset

We're done with all those objects in the environment pane so let's do some house cleaning.\
The following code will remove the objects and reload everything that we'll need.

```{r}
#| label: housekeeping
#| echo: true
#| message: false


rm(list=ls())
base_path           <- find_rstudio_root_file()                     
source_path         <- file.path(base_path, "source_data//")
csv_path            <- file.path(base_path, "csv_output//") 
dat_path            <- file.path(base_path, "dat_output//")

TX_OK_Counties <- tigris::counties() |> filter(STATEFP == "40" | STATEFP == "48")
TX_OK_Counties <- sf::st_transform(TX_OK_Counties, crs = 32614)

```

# Comma Separated Values - CSV

## Write to csv

We don't need all the rows so let's filter some out

```{r}
#| label: filter
#| echo: true


  TexomaList <- c("Marshall", "Bryan", "Cooke", "Grayson")
  TexomaCounties <- TX_OK_Counties |> filter(NAME %in% TexomaList) # %in% is an "infix" symbol

```

### Find the centroid for each county and plot it

This will give us a set of points. Saving polygons to a csv isn't going to be all that useful - it would be really difficult to parse that out and get it back into a GIS system. If you aren't using the polygon data it will work fine.

```{r}
#| label: centroid
#| echo: true
#| message: false
#| warning: false
 TexomaCentroids <- sf::st_centroid(TexomaCounties)

plot(TexomaCounties$geometry) + 
  plot(TexomaCentroids$geometry, add = TRUE, pch = 19, col = 2)

```

***

*These counties were intended to be those that surround Lake Texoma. One could argue that since I included Cooke county in the southwest I should probably include the county to the north of it as well (Love). How would you go about fixing that?*  

***


### Create columns for coordinates from geometry column

Already having columns for x and y will make it much easier to import this back into a GIS system.

```{r}
#| label: coord columns
#| include: false
Centroids <- TexomaCentroids %>% mutate("northing" = sf::st_coordinates(.)[,2],
                                        "easting"  = sf::st_coordinates(.)[,1]) |> 
# and then drop the geometry column -----------
             sf::st_drop_geometry() # This is necessary when using minicharts with leaflet maps 


```

### Write out the file

I use a ".dat" extension so that I know that the date columns haven't been modified accidentally by nosy people using excel(including myself). Otherwise they are just a csv.

```{r}
#| label: write_centroids1
#| include: false

timestamp <- format(Sys.time(), "%Y%m%d_%H%M")
write_csv(Centroids, paste0(csv_path, "TexomaCountyCentroids", "_", timestamp, ".csv"))
write_csv(Centroids, paste0(dat_path, "TexomaCountyCentroids", "_", timestamp, ".dat")) # Excel can't jack it up if it can't open it.

```

### There's too many columns - let's get rid of some

*I use the names of characters from the Dilbert comic strip when I can't come up with a meaningful df name.*

#### Select by column name

```{r}
#| label: select1
#| echo: true

# Include by column name
dilbert <- Centroids |> select(STATEFP, COUNTYFP, NAME, ALAND, AWATER, northing, easting )
# Exclude by column name
wally <- Centroids |> select(-CBSAFP, -CLASSFP, -COUNTYNS, -CSAFP, -FUNCSTAT, -GEOID, -INTPTLAT,
                             -INTPTLON,-METDIVFP,-MTFCC,-NAMELSAD, -LSAD )


```

#### Select by a list of column names

In this case I'm deleting everything in the list - if I remove the "-" in front of "all_of" I'd keep everything in the list.

```{r}
#| label: select2
#| echo: true
delList <-  c("CBSAFP", "CLASSFP", "COUNTYNS", "CSAFP", "FUNCSTAT", "GEOID", "INTPTLAT",
             "INTPTLON","METDIVFP","MTFCC","NAMELSAD", "LSAD" )
alice <- Centroids |> select(-all_of(delList))

```

#### Select by index (location)

Be careful with indexing columns. If for some reason the number of columns, or order of columns changes upstream, it will wreak havoc on your data frame.

I use indexing when I first load a data frame - sometimes its easier to index a column than to type some bizarre column name.

If the data frame is already in some type of workflow where the columns could change, I avoid indexing. But by then I've changed the column name to something reasonable anyway.

```{r}
#| label: select3
#| echo: true

# Include by index
dogbert <- Centroids |> dplyr::select(1,5,14:19)

# Exclude by index
ratbert <- Centroids |> dplyr::select(-2:-4, -6:-13)

```

### The dogbert data frame has the most useful data so lets write it to a csv.

I'm using the same name with a time stamp so it won't overwrite what we did previously. It might be worthwhile to compare the files. Time stamps in file names are sometimes useful and other times not so much. Early in a project when I'm making lots of changes to the data I use them. Once I get downstream projects going that use the data, I take the time stamp off, so I don't have to change the file name every time I reload it in downstream scripts.

```{r}
#| label: write_centroids2
#| include: false

timestamp <- format(Sys.time(), "%Y%m%d_%H%M")
write_csv(dogbert, paste0(csv_path, "TexomaCountyCentroids", "_", timestamp, ".csv"))
write_csv(dogbert, paste0(dat_path, "TexomaCountyCentroids", "_", timestamp, ".dat")) 



```

# Read from a csv and convert to an sf object

I used "Import Dataset" here because the file name was so long and my typing is so bad.

```{r}
#| label: read_csv
#| echo: true

CountyCentroids <- read_csv(paste0(csv_path, "TexomaCountyCentroids_20250303_1434.csv"), 
                                                col_types = cols(INTPTLAT = col_number(), 
                                                                 INTPTLON = col_number(), 
                                                                 northing = col_number(), # these cols need to be numeric
                                                                 easting = col_number()))


```

## Convert data frame with coordinate columns to sf object

```{r}
#| label: convert_sf1
#| echo: true
fred <- CountyCentroids |> sf::st_as_sf(coords=c("northing","easting"), crs=32614)

plot(fred$geometry) # that don't look right!

```

### Something's not quite right about that!

Make sure you get x and y coords in right order

```{r}
#| label: convert_sf2
#| echo: true
fred <- CountyCentroids |> 
  sf::st_as_sf(coords=c("easting","northing"), crs=32614) # x and y coords in right order

plot(TexomaCounties$geometry, col = 3) +
plot(fred$geometry, col = 2, pch = 19, add = TRUE)

```
